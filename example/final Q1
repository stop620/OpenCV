#include <iostream>
#include "opencv2/opencv.hpp"

using namespace cv;
using namespace std;

Mat calcGrayHist(const Mat& img) { //영상의 히스토그램 값을 구하는 함수
	CV_Assert(img.type() == CV_8UC1);

	Mat hist;
	int channels[] = { 0 };
	int dims = 1;
	const int histSize[] = { 256 };
	float graylevel[] = { 0,256 };
	const float* ranges[] = { graylevel };

	calcHist(&img, 1, channels, noArray(), hist, dims, histSize, ranges);

	return hist;
}
Mat getHistImage(const Mat& hist) { //히스토그램을 그래프로 그리는 함수
	CV_Assert(hist.type() == CV_32FC1);
	CV_Assert(hist.size() == Size(1, 256));

	double histMax;
	minMaxLoc(hist, 0, &histMax);

	Mat imgHist(100, 256, CV_8UC1, Scalar(255));
	for (int i = 0; i < 256; i++) {
		line(imgHist, Point(i, 100), Point(i, 100 - cvRound(hist.at<float>(i, 0) * 100 / histMax)), Scalar(0));
	}
	return imgHist;
}
void main() {
	Mat src = imread("images/123.jpg", IMREAD_COLOR);
	Mat gray;
	float avg;
	
	cvtColor(src, gray, COLOR_BGR2GRAY); //컬러영상을 그레이로 변환
	Mat gHist = getHistImage(calcGrayHist(gray)); //원본 그레이영상의 히스토그램
	imshow("image", gray);
	imshow("hist", gHist);
	avg = mean(gray)[0]; //영상의 밝기를 판단하기 위해 평균값을 구함
	while (1) {
		int keycode = waitKey();

		if (keycode == 32) { //스페이스바를 누를 시 작동
			float bright = avg - 128; //흑백영상 중간값인 128을 기준으로 조절할 밝기를 구함
			Mat dst = gray - bright;//원본영상에서 구해진 밝기만큼을 조절
			double gmin, gmax;
			minMaxLoc(dst, &gmin, &gmax);
			Mat dst2 = (dst - gmin) * 255 / (gmax - gmin);
			imshow("image", dst2); //결과영상
			imshow("hist", getHistImage(calcGrayHist(dst2)));//결과 히스토그램
			waitKey(); //다른 키 입력시 원본으로 돌아감
			imshow("image", gray);
			imshow("hist", gHist);
		}
		else {
			break;
		}
	}
	waitKey();
	destroyAllWindows();
}
